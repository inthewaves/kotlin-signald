// File is generated by ./gradlew generateSignaldClasses --- do not edit unless reformatting
package org.inthewaves.kotlinsignald.clientprotocol.v1.structures

import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import org.inthewaves.kotlinsignald.clientprotocol.SocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.SuspendSocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.JsonMessageWrapper
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.LeaveGroup

@Serializable
@SerialName("leave_group")
public data class LeaveGroupRequest(
    /**
     * The account to use
     *
     * Example: "+12024561414"
     */
    public val account: String,
    /**
     * The group to leave
     *
     * Example: "EdSqI90cS0UomDpgUXOlCoObWvQOXlH5G3Z2d3f4ayE="
     */
    public val groupID: String
) : SignaldRequestBodyV1<GroupInfo>() {
    internal override val responseWrapperSerializer: KSerializer<LeaveGroup>
        get() = LeaveGroup.serializer()

    internal override val responseDataSerializer: KSerializer<GroupInfo>
        get() = GroupInfo.serializer()

    internal override fun getTypedResponseOrNull(responseWrapper: JsonMessageWrapper<*>): GroupInfo? =
        if (responseWrapper is LeaveGroup && responseWrapper.data is GroupInfo) {
            responseWrapper.data
        } else {
            null
        }

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws NoSuchAccountError
     * @throws ServerNotFoundError
     * @throws InvalidProxyError
     * @throws InternalError
     * @throws UnknownGroupError
     * @throws GroupVerificationError
     * @throws InvalidRequestError
     * @throws AuthorizationFailedError
     * @throws SQLError
     */
    public override fun submit(socketCommunicator: SocketCommunicator, id: String): GroupInfo =
        super.submit(socketCommunicator, id)

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws NoSuchAccountError
     * @throws ServerNotFoundError
     * @throws InvalidProxyError
     * @throws InternalError
     * @throws UnknownGroupError
     * @throws GroupVerificationError
     * @throws InvalidRequestError
     * @throws AuthorizationFailedError
     * @throws SQLError
     */
    public override suspend fun submitSuspend(
        socketCommunicator: SuspendSocketCommunicator,
        id: String
    ): GroupInfo = super.submitSuspend(socketCommunicator, id)
}

// File is generated by ./gradlew generateSignaldClasses --- do not edit unless reformatting
package org.inthewaves.kotlinsignald.clientprotocol.v1.structures

import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import org.inthewaves.kotlinsignald.clientprotocol.SocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.SuspendSocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.GenerateLinkingUri
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.JsonMessageWrapper

/**
 * Generate a linking URI. Typically this is QR encoded and scanned by the primary device. Submit
 * the returned session_id with a finish_link request.
 */
@Serializable
@SerialName("generate_linking_uri")
public data class GenerateLinkingURIRequest(
    /**
     * The identifier of the server to use. Leave blank for default (usually Signal production
     * servers but configurable at build time)
     */
    public val server: String? = null
) : SignaldRequestBodyV1<LinkingURI>() {
    internal override val responseWrapperSerializer: KSerializer<GenerateLinkingUri>
        get() = GenerateLinkingUri.serializer()

    internal override val responseDataSerializer: KSerializer<LinkingURI>
        get() = LinkingURI.serializer()

    internal override fun getTypedResponseOrNull(responseWrapper: JsonMessageWrapper<*>):
        LinkingURI? = if (responseWrapper is GenerateLinkingUri && responseWrapper.data is
        LinkingURI
    ) {
        responseWrapper.data
    } else {
        null
    }

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws ServerNotFoundError
     * @throws InvalidProxyError
     */
    public override fun submit(socketCommunicator: SocketCommunicator, id: String): LinkingURI =
        super.submit(socketCommunicator, id)

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws ServerNotFoundError
     * @throws InvalidProxyError
     */
    public override suspend fun submitSuspend(
        socketCommunicator: SuspendSocketCommunicator,
        id: String
    ): LinkingURI = super.submitSuspend(socketCommunicator, id)
}

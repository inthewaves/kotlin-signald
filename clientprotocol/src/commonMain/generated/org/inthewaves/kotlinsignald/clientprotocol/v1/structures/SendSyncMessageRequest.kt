// File is generated by ./gradlew generateSignaldClasses --- do not edit unless reformatting
package org.inthewaves.kotlinsignald.clientprotocol.v1.structures

import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import org.inthewaves.kotlinsignald.clientprotocol.SocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.SuspendSocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.JsonMessageWrapper
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.SendSyncMessage

/**
 * Sends a sync message to the account's devices
 */
@Serializable
@SerialName("send_sync_message")
public data class SendSyncMessageRequest(
    /**
     * Example: "+12024561414"
     */
    public val account: String,
    /**
     * This can be set to indicate to other devices about having viewed a view-once message.
     */
    @SerialName("view_once_open_message")
    public val viewOnceOpenMessage: JsonViewOnceOpenMessage? = null,
    /**
     * This can be set to indicate to other devices about a response to an incoming message request
     * from an unknown user or group. Warning: Using the BLOCK and BLOCK_AND_DELETE options relies on
     * other devices to do the blocking, and it does not make you leave the group!
     */
    @SerialName("message_request_response")
    public val messageRequestResponse: JsonMessageRequestResponseMessage? = null
) : SignaldRequestBodyV1<JsonSendMessageResult>() {
    internal override val responseWrapperSerializer: KSerializer<SendSyncMessage>
        get() = SendSyncMessage.serializer()

    internal override val responseDataSerializer: KSerializer<JsonSendMessageResult>
        get() = JsonSendMessageResult.serializer()

    internal override fun getTypedResponseOrNull(responseWrapper: JsonMessageWrapper<*>):
        JsonSendMessageResult? = if (responseWrapper is SendSyncMessage && responseWrapper.data
        is JsonSendMessageResult
    ) {
        responseWrapper.data
    } else {
        null
    }

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws InvalidRequestError
     * @throws RateLimitError
     * @throws InternalError
     * @throws UnregisteredUserError
     * @throws NoSuchAccountError
     * @throws ServerNotFoundError
     * @throws InvalidProxyError
     * @throws AuthorizationFailedError
     */
    public override fun submit(socketCommunicator: SocketCommunicator, id: String):
        JsonSendMessageResult = super.submit(socketCommunicator, id)

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws InvalidRequestError
     * @throws RateLimitError
     * @throws InternalError
     * @throws UnregisteredUserError
     * @throws NoSuchAccountError
     * @throws ServerNotFoundError
     * @throws InvalidProxyError
     * @throws AuthorizationFailedError
     */
    public override suspend fun submitSuspend(
        socketCommunicator: SuspendSocketCommunicator,
        id: String
    ): JsonSendMessageResult = super.submitSuspend(socketCommunicator, id)
}

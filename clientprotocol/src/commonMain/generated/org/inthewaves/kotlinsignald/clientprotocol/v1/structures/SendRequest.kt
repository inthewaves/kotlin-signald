// File is generated by ./gradlew generateSignaldClasses --- do not edit unless reformatting
package org.inthewaves.kotlinsignald.clientprotocol.v1.structures

import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import org.inthewaves.kotlinsignald.clientprotocol.SocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.SuspendSocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.JsonMessageWrapper
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.Send

@Serializable
@SerialName("send")
public data class SendRequest(
    /**
     * Example: "+12024561414"
     */
    public val username: String? = null,
    /**
     * Example: "0cc10e61-d64c-4dbc-b51c-334f7dd45a4a"
     */
    public val account: String? = null,
    public val recipientAddress: JsonAddress? = null,
    /**
     * Example: "EdSqI90cS0UomDpgUXOlCoObWvQOXlH5G3Z2d3f4ayE="
     */
    public val recipientGroupId: String? = null,
    /**
     * Example: "hello"
     */
    public val messageBody: String? = null,
    public val attachments: List<JsonAttachment>? = null,
    public val quote: JsonQuote? = null,
    public val timestamp: Long? = null,
    public val mentions: List<JsonMention>? = null,
    public val previews: List<JsonPreview>? = null,
    /**
     * Optionally set to a sub-set of group members. Ignored if recipientGroupId isn't specified
     */
    public val members: List<JsonAddress>? = null
) : SignaldRequestBodyV1<SendResponse>() {
    internal override val responseWrapperSerializer: KSerializer<Send>
        get() = Send.serializer()

    internal override val responseDataSerializer: KSerializer<SendResponse>
        get() = SendResponse.serializer()

    internal override fun getTypedResponseOrNull(responseWrapper: JsonMessageWrapper<*>):
        SendResponse? = if (responseWrapper is Send && responseWrapper.data is SendResponse) {
        responseWrapper.data
    } else {
        null
    }

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws NoSuchAccountError
     * @throws ServerNotFoundError
     * @throws InvalidProxyError
     * @throws NoSendPermissionError
     * @throws InvalidAttachmentError
     * @throws InternalError
     * @throws InvalidRequestError
     * @throws UnknownGroupError
     * @throws RateLimitError
     * @throws InvalidRecipientError
     * @throws AttachmentTooLargeError
     * @throws AuthorizationFailedError
     * @throws SQLError
     */
    public override fun submit(socketCommunicator: SocketCommunicator, id: String): SendResponse =
        super.submit(socketCommunicator, id)

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws NoSuchAccountError
     * @throws ServerNotFoundError
     * @throws InvalidProxyError
     * @throws NoSendPermissionError
     * @throws InvalidAttachmentError
     * @throws InternalError
     * @throws InvalidRequestError
     * @throws UnknownGroupError
     * @throws RateLimitError
     * @throws InvalidRecipientError
     * @throws AttachmentTooLargeError
     * @throws AuthorizationFailedError
     * @throws SQLError
     */
    public override suspend fun submitSuspend(
        socketCommunicator: SuspendSocketCommunicator,
        id: String
    ): SendResponse = super.submitSuspend(socketCommunicator, id)
}

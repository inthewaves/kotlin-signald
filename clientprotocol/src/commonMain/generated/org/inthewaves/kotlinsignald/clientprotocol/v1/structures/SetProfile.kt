// File is generated by ./gradlew generateSignaldClasses --- do not edit unless reformatting
package org.inthewaves.kotlinsignald.clientprotocol.v1.structures

import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import org.inthewaves.kotlinsignald.clientprotocol.SocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.SuspendSocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.JsonMessageWrapper

@Serializable
@SerialName("set_profile")
public data class SetProfile(
    /**
     * The phone number of the account to use
     *
     * Example: "+12024561414"
     */
    public val account: String,
    /**
     * Change the profile name
     *
     * Example: "signald user"
     */
    public val name: String? = null,
    /**
     * Path to new profile avatar file. If unset or null, unset the profile avatar
     *
     * Example: "/tmp/image.jpg"
     */
    public val avatarFile: String? = null,
    /**
     * Change the 'about' profile field
     */
    public val about: String? = null,
    /**
     * Change the profile emoji
     */
    public val emoji: String? = null,
    /**
     * Change the profile payment address. Payment address must be a *base64-encoded* MobileCoin
     * address. Note that this is not the traditional MobileCoin address encoding, which is custom.
     * Clients are responsible for converting between MobileCoin's custom base58 on the user-facing
     * side and base64 encoding on the signald side.
     */
    @SerialName("mobilecoin_address")
    public val mobilecoinAddress: String? = null,
    /**
     * configure visible badge IDs
     */
    @SerialName("visible_badge_ids")
    public val visibleBadgeIds: List<String>? = null
) : SignaldRequestBodyV1<EmptyResponse>() {
    internal override val responseWrapperSerializer:
        KSerializer<org.inthewaves.kotlinsignald.clientprotocol.v1.requests.SetProfile>
            get() = org.inthewaves.kotlinsignald.clientprotocol.v1.requests.SetProfile.serializer()

    internal override val responseDataSerializer: KSerializer<EmptyResponse>
        get() = EmptyResponse.serializer()

    internal override fun getTypedResponseOrNull(responseWrapper: JsonMessageWrapper<*>):
        EmptyResponse? = if (responseWrapper is
        org.inthewaves.kotlinsignald.clientprotocol.v1.requests.SetProfile &&
        responseWrapper.data is EmptyResponse
    ) {
        responseWrapper.data
    } else {
        null
    }

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws InternalError
     * @throws InvalidProxyError
     * @throws ServerNotFoundError
     * @throws NoSuchAccountError
     * @throws InvalidBase64Error
     * @throws InvalidRequestError
     */
    public override fun submit(socketCommunicator: SocketCommunicator, id: String): EmptyResponse =
        super.submit(socketCommunicator, id)

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws InternalError
     * @throws InvalidProxyError
     * @throws ServerNotFoundError
     * @throws NoSuchAccountError
     * @throws InvalidBase64Error
     * @throws InvalidRequestError
     */
    public override suspend fun submitSuspend(
        socketCommunicator: SuspendSocketCommunicator,
        id: String
    ): EmptyResponse = super.submitSuspend(socketCommunicator, id)
}

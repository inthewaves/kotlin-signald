// File is generated by ./gradlew generateSignaldClasses --- do not edit unless reformatting
package org.inthewaves.kotlinsignald.clientprotocol.v1.structures

import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import org.inthewaves.kotlinsignald.clientprotocol.SocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.SuspendSocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.IsIdentifierRegistered
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.JsonMessageWrapper

/**
 * Determine whether an account identifier is registered on the Signal service.
 */
@Serializable
@SerialName("is_identifier_registered")
public data class IsIdentifierRegisteredRequest(
    /**
     * The account to use to retrieve the remote config
     *
     * Example: "+12024561414"
     */
    public val account: String,
    /**
     * The UUID of an identifier to check if it is registered on Signal. This UUID is either a Phone
     * Number Identity (PNI) or an Account Identity (ACI).
     *
     * Example: "aeed01f0-a234-478e-8cf7-261c283151e7"
     */
    public val identifier: String
) : SignaldRequestBodyV1<BooleanMessage>() {
    internal override val responseWrapperSerializer: KSerializer<IsIdentifierRegistered>
        get() = IsIdentifierRegistered.serializer()

    internal override val responseDataSerializer: KSerializer<BooleanMessage>
        get() = BooleanMessage.serializer()

    internal override fun getTypedResponseOrNull(responseWrapper: JsonMessageWrapper<*>):
        BooleanMessage? = if (responseWrapper is IsIdentifierRegistered && responseWrapper.data
        is BooleanMessage
    ) {
        responseWrapper.data
    } else {
        null
    }

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws InternalError
     * @throws InvalidProxyError
     * @throws ServerNotFoundError
     * @throws NoSuchAccountError
     */
    public override fun submit(socketCommunicator: SocketCommunicator, id: String): BooleanMessage =
        super.submit(socketCommunicator, id)

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws InternalError
     * @throws InvalidProxyError
     * @throws ServerNotFoundError
     * @throws NoSuchAccountError
     */
    public override suspend fun submitSuspend(
        socketCommunicator: SuspendSocketCommunicator,
        id: String
    ): BooleanMessage = super.submitSuspend(socketCommunicator, id)
}

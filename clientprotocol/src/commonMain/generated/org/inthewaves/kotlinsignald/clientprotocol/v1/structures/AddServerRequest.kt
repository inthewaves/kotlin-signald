// File is generated by ./gradlew generateSignaldClasses --- do not edit unless reformatting
package org.inthewaves.kotlinsignald.clientprotocol.v1.structures

import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.builtins.serializer
import org.inthewaves.kotlinsignald.clientprotocol.SocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.SuspendSocketCommunicator
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.AddServer
import org.inthewaves.kotlinsignald.clientprotocol.v1.requests.JsonMessageWrapper

/**
 * add a new server to connect to. Returns the new server's UUID.
 */
@Serializable
@SerialName("add_server")
public data class AddServerRequest(
    public val server: Server
) : SignaldRequestBodyV1<String>() {
    internal override val responseWrapperSerializer: KSerializer<AddServer>
        get() = AddServer.serializer()

    internal override val responseDataSerializer: KSerializer<String>
        get() = String.serializer()

    internal override fun getTypedResponseOrNull(responseWrapper: JsonMessageWrapper<*>): String? =
        if (responseWrapper is AddServer && responseWrapper.data is String) {
            responseWrapper.data
        } else {
            null
        }

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws InvalidProxyError
     * @throws InternalError
     */
    public override fun submit(socketCommunicator: SocketCommunicator, id: String): String =
        super.submit(socketCommunicator, id)

    /**
     * @throws org.inthewaves.kotlinsignald.clientprotocol.RequestFailedException if the signald
     * socket sends a bad or error response, or unable to serialize our request
     * @throws org.inthewaves.kotlinsignald.clientprotocol.SignaldException if an I/O error occurs
     * during socket communication
     * @throws InvalidProxyError
     * @throws InternalError
     */
    public override suspend fun submitSuspend(
        socketCommunicator: SuspendSocketCommunicator,
        id: String
    ): String = super.submitSuspend(socketCommunicator, id)
}
